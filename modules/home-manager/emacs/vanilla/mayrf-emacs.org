#+title: GNU Emacs configuration
#+author: mayrf
#+email: 70516376+mayrf@users.noreply.github.com
#+language: en

This is my WIP vanilla Emacs config. The structure and content is heavily copied from Protesilaos Stavrous' [[https://protesilaos.com/emacs/dotemacs][dotemacs config]] and I am very grateful to him for sharing all of his superb Emacs resources with the community.

* The early initialisation of Emacs (=early-init.el=)

#+begin_src emacs-lisp :tangle "early-init.el"
;; (setq package-enable-at-startup nil
;;      inhibit-startup-message   t
;;     frame-resize-pixelwise    t  ; fine resize
;;      package-native-compile    t ; native compile packages
;; )
;; (scroll-bar-mode -1)               ; disable scrollbar
;; (tool-bar-mode -1)                 ; disable toolbar
;; (tooltip-mode -1)                  ; disable tooltips
;; (menu-bar-mode -1)                 ; disable menubar
#+end_src

* The main initialisation of Emacs (=init.el=)
** Package Manager
*** Elpaca
**** NixOs specific fix
See [[https://github.com/progfolio/elpaca/wiki/Usage-with-Nix][Usage with Nix · progfolio/elpaca Wiki · GitHub]]
#+begin_src emacs-lisp :tangle "init.el"
(defun my/nixos-p ()
  "Return t if operating system is NixOS, nil otherwise."
  (string-match-p "NixOS" (shell-command-to-string "uname -v")))

(defun my/nixos/get-emacs-build-date ()
  "Return NixOS Emacs build date."
  (string-match "--prefix.*emacs.*\\([[:digit:]]\\{8\\}\\)" system-configuration-options)
  (string-to-number (match-string 1 system-configuration-options)))

;; Run this before the elpaca.el is loaded. Before the installer in your init.el is a good spot.
(when (my/nixos-p) (setq elpaca-core-date (list (my/nixos/get-emacs-build-date))))
;;(setq elpaca-core-date (list (my/nixos/get-emacs-build-date)))
#+end_src

**** Installation
#+begin_src emacs-lisp :tangle "init.el"
(defvar elpaca-installer-version 0.8)
(defvar elpaca-directory (expand-file-name "elpaca/" user-emacs-directory))
(defvar elpaca-builds-directory (expand-file-name "builds/" elpaca-directory))
(defvar elpaca-repos-directory (expand-file-name "repos/" elpaca-directory))
(defvar elpaca-order '(elpaca :repo "https://github.com/progfolio/elpaca.git"
                              :ref nil :depth 1
                              :files (:defaults "elpaca-test.el" (:exclude "extensions"))
                              :build (:not elpaca--activate-package)))
(let* ((repo  (expand-file-name "elpaca/" elpaca-repos-directory))
       (build (expand-file-name "elpaca/" elpaca-builds-directory))
       (order (cdr elpaca-order))
       (default-directory repo))
  (add-to-list 'load-path (if (file-exists-p build) build repo))
  (unless (file-exists-p repo)
    (make-directory repo t)
    (when (< emacs-major-version 28) (require 'subr-x))
    (condition-case-unless-debug err
        (if-let* ((buffer (pop-to-buffer-same-window "*elpaca-bootstrap*"))
                  ((zerop (apply #'call-process `("git" nil ,buffer t "clone"
                                                  ,@(when-let* ((depth (plist-get order :depth)))
                                                      (list (format "--depth=%d" depth) "--no-single-branch"))
                                                  ,(plist-get order :repo) ,repo))))
                  ((zerop (call-process "git" nil buffer t "checkout"
                                        (or (plist-get order :ref) "--"))))
                  (emacs (concat invocation-directory invocation-name))
                  ((zerop (call-process emacs nil buffer nil "-Q" "-L" "." "--batch"
                                        "--eval" "(byte-recompile-directory \".\" 0 'force)")))
                  ((require 'elpaca))
                  ((elpaca-generate-autoloads "elpaca" repo)))
            (progn (message "%s" (buffer-string)) (kill-buffer buffer))
          (error "%s" (with-current-buffer buffer (buffer-string))))
      ((error) (warn "%s" err) (delete-directory repo 'recursive))))
  (unless (require 'elpaca-autoloads nil t)
    (require 'elpaca)
    (elpaca-generate-autoloads "elpaca" repo)
    (load "./elpaca-autoloads")))
(add-hook 'after-init-hook #'elpaca-process-queues)
(elpaca `(,@elpaca-order))
#+end_src

**** Configuration
#+begin_src emacs-lisp :tangle "init.el"
;; Install use-package support
(elpaca elpaca-use-package
  ;; Enable use-package :ensure support for Elpaca.
  (elpaca-use-package-mode))
(setq use-package-always-ensure t)
#+end_src

** Custom Elisp
*** Reload config
#+begin_src emacs-lisp :tangle "init.el"
(defun my/reload-emacs ()
  (interactive)
  (load-file "~/.config/emacs-vanilla/init.el"))
#+end_src

** The =init.el= arrangements for my own modules and custom libraries

I use a literate configuration as the "source of truth" for my Emacs
configuration. What I do is to specify everything in one file and
provide instructions for where things should go. The end product
consists of a large set of files, encompassing the =early-init.el=
([[#h:7b7b5898-09f7-4128-8af0-4041f67cb729][The early initialisation of Emacs (=early-init.el=)]]), the =init.el=
([[#h:dae63bd9-93a8-41c4-af1b-d0f39ba50974][The main initialisation of Emacs (=init.el=)]]), the modules of my
init, and the custom libraries I wrote.

In the code snippet further below, I add two directories to the
~load-path~. Concretely, any Emacs Lisp file inside these directories
is thus declared to Emacs and we can load it properly. Here is what
these two directories are about:

- The =prot-emacs-modules= directory :: This is where I store all the
  individual components of my Emacs setup. When I run Emacs, the
  directory is a subdirectory of =~/.emacs.d/=. All files are prefixed
  with =prot-emacs-=, followed by a word that broadly describes their
  scope of application, such as ~prot-emacs-font~, ~prot-emacs-window~...

  Each module consists of ordinary Elisp and a final call to ~provide~
  the set of configurations as a /feature/ that can then be loaded via
  ~require~ from the =init.el=. What Emacs calls a "feature" is, in
  essence, a variable whose value is the entirety of the file that has
  a ~provide~ call in it. Features are symbols that are named after
  the file name minus its file type extension: ~prot-emacs-theme~ is
  the feature provided by =prot-emacs-theme.el=.

  Modules are intended only for configuration purposes.  They do not
  define any major variables/functions, unless those are too
  small/specific to be extracted into their own library.

- The =prot-lisp= directory :: As with the aforementioned modules,
  this directory is a subdirectory of =~/.emacs.d/=. This is where I
  keep all my custom code that individual modules configure. The
  contents of this directory can be understood as fully fledged
  "packages" and, in fact, many of my actual packages started out as
  =prot-lisp= experiments.

  Each file is written in accordance with the conventions on Emacs
  packaging, even though they are only intended for use in my setup
  and are not polished to the level of my actual public-facing
  packages (meaning the ones listed here: <https://protesilaos.com/emacs>).

All this may not matter to you if you are reading either the
=prot-emacs.org= file or its web page version. Still, this arrangement
gives me maximum flexbility, as I can still share my code the way it
would look. Plus, if I ever decide to stop using the literate config,
I can simply stop editing it and perfom the edits directly in the
files that are already placed where I need them to be.

#+begin_src emacs-lisp :tangle "init.el"
(mapc
 (lambda (string)
   (add-to-list 'load-path (locate-user-emacs-file string)))
 ;;'("prot-lisp" "prot-emacs-modules"))
 '("mayrf-lisp" "mayrf-emacs-modules"))
#+end_src


** Evil mode

#+begin_src emacs-lisp :tangle "init.el"
(use-package evil
  :ensure t
  :init
  (setq evil-want-integration t) ;; This is optional since it's already set to t by default.
  (setq evil-want-keybinding nil)
  :config
  (evil-mode 1))

(use-package evil-collection
  :after evil
  :ensure t
  :config
  (evil-collection-init))
#+end_src

* completion:
# #+begin_src elisp :tangle "init.el"
# (use-package vertico
#   :ensure t
#   ;; :custom
#   ;; (vertico-scroll-margin 0) ;; Different scroll margin
#   ;; (vertico-count 20) ;; Show more candidates
#   ;; (vertico-resize t) ;; Grow and shrink the Vertico minibuffer
#   ;; (vertico-cycle t) ;; Enable cycling for `vertico-next/previous'
#   :init
#   (vertico-mode))
# #+end_src
