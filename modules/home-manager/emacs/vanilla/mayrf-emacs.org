#+title: GNU Emacs configuration
#+author: mayrf
#+email: 70516376+mayrf@users.noreply.github.com
#+language: en

This is my WIP vanilla Emacs config. The structure and content is heavily copied from Protesilaos Stavrous' [[https://protesilaos.com/emacs/dotemacs][dotemacs config]] and I am very grateful to him for sharing all of his superb Emacs resources with the community.

* The early initialisation of Emacs (=early-init.el=)

#+begin_src emacs-lisp :tangle "early-init.el"
;; (setq package-enable-at-startup nil
;;      inhibit-startup-message   t
;;     frame-resize-pixelwise    t  ; fine resize
;;      package-native-compile    t ; native compile packages
;; )
;; (scroll-bar-mode -1)               ; disable scrollbar
;; (tool-bar-mode -1)                 ; disable toolbar
;; (tooltip-mode -1)                  ; disable tooltips
;; (menu-bar-mode -1)                 ; disable menubar
#+end_src

* The main initialisation of Emacs (=init.el=)
** Package Manager
*** Elpaca
**** NixOs specific fix
See [[https://github.com/progfolio/elpaca/wiki/Usage-with-Nix][Usage with Nix · progfolio/elpaca Wiki · GitHub]]
#+begin_src emacs-lisp :tangle "init.el"
(defun my/nixos-p ()
  "Return t if operating system is NixOS, nil otherwise."
  (string-match-p "NixOS" (shell-command-to-string "uname -v")))

(defun my/nixos/get-emacs-build-date ()
  "Return NixOS Emacs build date."
  (string-match "--prefix.*emacs.*\\([[:digit:]]\\{8\\}\\)" system-configuration-options)
  (string-to-number (match-string 1 system-configuration-options)))

;; Run this before the elpaca.el is loaded. Before the installer in your init.el is a good spot.
(when (my/nixos-p) (setq elpaca-core-date (list (my/nixos/get-emacs-build-date))))
;;(setq elpaca-core-date (list (my/nixos/get-emacs-build-date)))
#+end_src

**** Installation
#+begin_src emacs-lisp :tangle "init.el"
(defvar elpaca-installer-version 0.8)
(defvar elpaca-directory (expand-file-name "elpaca/" user-emacs-directory))
(defvar elpaca-builds-directory (expand-file-name "builds/" elpaca-directory))
(defvar elpaca-repos-directory (expand-file-name "repos/" elpaca-directory))
(defvar elpaca-order '(elpaca :repo "https://github.com/progfolio/elpaca.git"
                              :ref nil :depth 1
                              :files (:defaults "elpaca-test.el" (:exclude "extensions"))
                              :build (:not elpaca--activate-package)))
(let* ((repo  (expand-file-name "elpaca/" elpaca-repos-directory))
       (build (expand-file-name "elpaca/" elpaca-builds-directory))
       (order (cdr elpaca-order))
       (default-directory repo))
  (add-to-list 'load-path (if (file-exists-p build) build repo))
  (unless (file-exists-p repo)
    (make-directory repo t)
    (when (< emacs-major-version 28) (require 'subr-x))
    (condition-case-unless-debug err
        (if-let* ((buffer (pop-to-buffer-same-window "*elpaca-bootstrap*"))
                  ((zerop (apply #'call-process `("git" nil ,buffer t "clone"
                                                  ,@(when-let* ((depth (plist-get order :depth)))
                                                      (list (format "--depth=%d" depth) "--no-single-branch"))
                                                  ,(plist-get order :repo) ,repo))))
                  ((zerop (call-process "git" nil buffer t "checkout"
                                        (or (plist-get order :ref) "--"))))
                  (emacs (concat invocation-directory invocation-name))
                  ((zerop (call-process emacs nil buffer nil "-Q" "-L" "." "--batch"
                                        "--eval" "(byte-recompile-directory \".\" 0 'force)")))
                  ((require 'elpaca))
                  ((elpaca-generate-autoloads "elpaca" repo)))
            (progn (message "%s" (buffer-string)) (kill-buffer buffer))
          (error "%s" (with-current-buffer buffer (buffer-string))))
      ((error) (warn "%s" err) (delete-directory repo 'recursive))))
  (unless (require 'elpaca-autoloads nil t)
    (require 'elpaca)
    (elpaca-generate-autoloads "elpaca" repo)
    (load "./elpaca-autoloads")))
(add-hook 'after-init-hook #'elpaca-process-queues)
(elpaca `(,@elpaca-order))
#+end_src

**** Configuration
#+begin_src emacs-lisp :tangle "init.el"
;; Install use-package support
(elpaca elpaca-use-package
  ;; Enable use-package :ensure support for Elpaca.
  (elpaca-use-package-mode))
(setq use-package-always-ensure t)
#+end_src

** Custom Elisp
*** Reload config
#+begin_src emacs-lisp :tangle "init.el"
(defun my/reload-emacs ()
  (interactive)
  (load-file "~/.config/emacs-vanilla/init.el"))
#+end_src

** Evil mode

#+begin_src emacs-lisp :tangle "init.el"
(use-package evil
  :ensure t
  :init
  (setq evil-want-integration t) ;; This is optional since it's already set to t by default.
  (setq evil-want-keybinding nil)
  :config
  (evil-mode 1))

(use-package evil-collection
  :after evil
  :ensure t
  :config
  (evil-collection-init))
#+end_src

# * completion:
# #+begin_src elisp :tangle "init.el"
# (use-package vertico
#   :ensure t
#   ;; :custom
#   ;; (vertico-scroll-margin 0) ;; Different scroll margin
#   ;; (vertico-count 20) ;; Show more candidates
#   ;; (vertico-resize t) ;; Grow and shrink the Vertico minibuffer
#   ;; (vertico-cycle t) ;; Enable cycling for `vertico-next/previous'
#   :init
#   (vertico-mode))
# #+end_src
